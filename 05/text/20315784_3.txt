---ソースコード---
// Gauss-Jordan method

#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <math.h>

#define N 5       // 拡大行列の行の数
#define M (N + 1) // 拡大行列の列の数
#define L 2       // 初期行列操作用

// N行M列の行列を出力する関数
void print_p(char *s, double r[N][M]);

// N元連立一次方程式を解く関数
int mat_leq(double p[N][M]);

double x[] = {-1.6, 2.7, 3.8, 4.1, 5.5};
int main(void)
{
    double p[N][M];
    int i, j;

    srand((unsigned)time(NULL));

    for (i = 0; i < N; i++)
    {
        p[i][N] = 0.0;
        for (j = 0; j < N; j++)
        {
            if (i > L || j > L - 1)
            {
                p[i][j] = (double)rand() / RAND_MAX * 2.0 - 1.0;
                p[i][N] += p[i][j] * x[j];
            }
            else
            {
                p[i][j] = 0.0;
            }
        }
    }

    print_p("＊拡大行列の初期値", p); // 初期データの表示

    if (mat_leq(p))
    {
        printf("＊エラー\n"); // 正常に解が得られない場合
        return 0;
    }

    print_p("＊掃き出し後の値", p); // 掃き出し後の表示

    printf("＊結果\n");
    for (i = 0; i < N; i++)
        printf("%16.8e\n", p[i][N]);

    return 0; // 正常終了
}

// N元連立一次方程式を解く関数（戻り値が0ならば解が求まっている）
int mat_leq(double p[N][M])
{
    // 必要な変数の宣言（配列の新規追加は不可）
    double tmp, pivot, del; //
    int i, j, k;            //

    for (i = 0; i < N; i++)
    {
        // 1行目からN行目まで

        // 小行列の左上が0の時は以降の要素をみて入れ替えを行う
        if (p[i][i] == 0)
        {
            for (j = i; j < N; ++j)
            {
                if (p[j][i] != 0)
                {
                    for (k = 0; k < M; ++k)
                    {
                        tmp = p[i][k];
                        p[i][k] = p[j][k];
                        p[j][k] = tmp;
                    }
                }
            }
        }

        // 小行列の左上をピボットとする
        // この時，ピボットが0の時は解なしとして返す
        pivot = p[i][i];
        if (pivot == 0.0)
        {
            return 1;
        }

        for (j = i; j < N + 1; ++j)
            p[i][j] = p[i][j] / pivot;
        p[i][i] = 1.0;

        for (k = 0; k < N; ++k)
        {
            del = p[k][i];
            for (j = i; j < N + 1; ++j)
                if (k != i)
                    p[k][j] -= del * p[i][j];
        }

        print_p("＊途中結果", p);
    }

    return (0); // 正常に計算
}

void print_p(char *s, double r[N][M])
{
    int i, j;

    printf("%s\n", s);

    for (i = 0; i < N; i++)
    {
        for (j = 0; j < M; j++)
            printf("%9.5f ", r[i][j]);
        printf("\n");
    }
}


---実行結果（N=5, L=2）---
＊拡大行列の初期値
  0.00000   0.00000   0.81708   0.70946  -0.11620   5.37461
  0.00000   0.00000  -0.94765   0.92831   0.04934   0.47638
  0.00000   0.00000  -0.74228   0.55452  -0.25958  -1.97484
 -0.79925   0.97178   0.76338   0.08420  -0.90650   2.16293
  0.51274  -0.44509  -0.71114  -0.15885   0.27894  -3.84155
＊途中結果
  1.00000  -0.86808  -1.38695  -0.30980   0.54403  -7.49226
  0.00000   0.00000  -0.94765   0.92831   0.04934   0.47638
  0.00000   0.00000  -0.74228   0.55452  -0.25958  -1.97484
  0.00000   0.00000   0.81708   0.70946  -0.11620   5.37461
  0.00000   0.27797  -0.34515  -0.16341  -0.47168  -3.82527
＊途中結果
  1.00000   0.00000  -2.46483  -0.82012  -0.92899 -19.43827
  0.00000   1.00000  -1.24168  -0.58788  -1.69687 -13.76145
  0.00000   0.00000  -0.74228   0.55452  -0.25958  -1.97484
  0.00000   0.00000   0.81708   0.70946  -0.11620   5.37461
  0.00000   0.00000  -0.94765   0.92831   0.04934   0.47638
＊途中結果
  1.00000   0.00000   0.00000  -2.66146  -0.06701 -12.88055
  0.00000   1.00000   0.00000  -1.51547  -1.26264 -10.45794
  0.00000   0.00000   1.00000  -0.74705   0.34971   2.66052
  0.00000   0.00000   0.00000   1.31986  -0.40194   3.20074
  0.00000   0.00000   0.00000   0.22037   0.38074   2.99760
＊途中結果
  1.00000   0.00000   0.00000   0.00000  -0.87751  -6.42633
  0.00000   1.00000   0.00000   0.00000  -1.72415  -6.78284
  0.00000   0.00000   1.00000   0.00000   0.12221   4.47216
  0.00000   0.00000   0.00000   1.00000  -0.30453   2.42507
  0.00000   0.00000   0.00000   0.00000   0.44785   2.46319
＊途中結果
  1.00000   0.00000   0.00000   0.00000   0.00000  -1.60000
  0.00000   1.00000   0.00000   0.00000   0.00000   2.70000
  0.00000   0.00000   1.00000   0.00000   0.00000   3.80000
  0.00000   0.00000   0.00000   1.00000   0.00000   4.10000
  0.00000   0.00000   0.00000   0.00000   1.00000   5.50000
＊掃き出し後の値
  1.00000   0.00000   0.00000   0.00000   0.00000  -1.60000
  0.00000   1.00000   0.00000   0.00000   0.00000   2.70000
  0.00000   0.00000   1.00000   0.00000   0.00000   3.80000
  0.00000   0.00000   0.00000   1.00000   0.00000   4.10000
  0.00000   0.00000   0.00000   0.00000   1.00000   5.50000
＊結果
 -1.60000000e+00
  2.70000000e+00
  3.80000000e+00
  4.10000000e+00
  5.50000000e+00

---実行結果（N=4, L=2）---
＊拡大行列の初期値
  0.00000   0.00000   0.82006   0.69382   5.96087
  0.00000   0.00000  -0.98618  -0.66059  -6.45591
  0.00000   0.00000  -0.62014  -0.74617  -5.41584
 -0.86532   0.52311  -0.12695   0.38405   3.88910
＊途中結果
  1.00000  -0.60452   0.14671  -0.44382  -4.49440
  0.00000   0.00000  -0.98618  -0.66059  -6.45591
  0.00000   0.00000  -0.62014  -0.74617  -5.41584
  0.00000   0.00000   0.82006   0.69382   5.96087
＊エラー
